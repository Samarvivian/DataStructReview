#include<stdio.h>
#include<stdlib.h>
void merge(int nums[], int left, int right)
{
	//新建一个数组存储临时数据
	int* temp = (int*)malloc(sizeof(int) * (right-left+1));
	int mid = (left + right) / 2;
	int i = left;
	int j = mid + 1;
	int k = 0;
	while (i <= mid && j <= right)
	{
		if (nums[i] <= nums[j])
		{
			temp[k++] = nums[i++];
		}
		else
		{
			temp[k++] = nums[j++];
		}
	}
	//将剩余元素复制到temp中
	while (i <= mid)
	{
		temp[k++] = nums[i++];
	}
	while (j <= right)
	{
		temp[k++] = nums[j++];
	}
	//将排序好的元素复制回原来数组中
	for (int count = 0; count < right - left + 1; count++)
	{
		nums[count + left] = temp[count];
	}
	free(temp);
}

void mergesort(int nums[], int left, int right)
{
	if (left >= right)
	{
		return;
	}
	int mid = (left + right) / 2;
	mergesort(nums, left, mid);
	mergesort(nums, mid+1, right);

	merge(nums, left, right);
}

int main()
{
	int nums[] = { 1,7,6,9,5,4,8 };
	int left = 0;
	int right = sizeof(nums) / sizeof(nums[0])-1;

	mergesort(nums, left, right);
	for (int i = 0; i < right + 1; i++)
	{
		printf("%d ", nums[i]);
	}
	return 0;
}
