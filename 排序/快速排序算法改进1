//假设数组是完全倒序的，那么每次partion后会生成一个0和一个n-1的数组
//时间复杂度大大增加
//为了让选取的基准数更加客观
//我们选择三个数的中位数作为基准数
int medianthree(int* nums, int i, int j, int z)
{
	int num1 = nums[i];
	int num2 = nums[j];
	int num3 = nums[z];

	if ((num1 <= num2 && num2 <= num3) || (num3 <= num2 && num2 <= num1))
	{
		return j;
	}
	else if ((num2 <= num1 && num1 <= num3) || (num3 <= num1 && num1 <= num2))
	{
		return i;
	}
	return z;
}
#include<stdio.h>
void swap(int* nums, int i, int j)
{
	int temp = nums[i];
	nums[i] = nums[j];
	nums[j] = temp;
}
int partion(int* nums, int left, int right)
{
	//选定基准数
	int base = medianthree(nums, left, (left + right) / 2, right);
	//将基准数放到数组最左边
	swap(nums, left, base);
	int i = left;
	int j = right;

	//下面内循环这两个while不要交换
	//例如2 0 1 4 3 5
	//此时i=1,j=3
	//如果先是i++,则i会变成3
	//这次partion之后，4会来到比2小的左边part
	while (i < j)
	{
		while (i < j && nums[j] >= nums[left])
		{
			j--;
		}
		while (i < j && nums[i] <= nums[left])
		{
			i++;
		}
		swap(nums, i, j);
	}
	swap(nums, left, i);
	return i;
}
void fastsort(int* nums, int left, int right)
{
	//当left>=right，退出递归
	if (left >= right)
	{
		return;
	}
	int index = partion(nums, left, right);
	fastsort(nums, left, index - 1);
	fastsort(nums, index + 1, right);
}
int main()
{
	int nums[] = { 1,8,9,2,3,67,9,10 };
	int len = sizeof(nums) / sizeof(nums[0]);
	fastsort(nums, 0, len - 1);
	for (int i = 0; i < len; i++)
	{
		printf("%d ", nums[i]);
	}
	return 0;
}
